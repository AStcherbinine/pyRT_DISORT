The observation module
======================
Let's begin by considering some of the quantities found in a typical
observation---the angles and wavelengths at which some instrument collected
data. In the "rover" case, I'll assume we have an rover than takes 2D images
such that the data have shape (M, N) and each pixel in the MxN grid
contains W wavelengths. The MxN array corresponds to emission and azimuthal
angles.

Angles
------
Suppose that we have an image that has shape (15, 20). In this case there's
a single incidence beam, 15 emission angles, and 20 azimuth
angles. Let's create a set of these angles.

.. code-block:: python

   import numpy as np

   incidence = 30
   beam_azimuth = 25
   emission = np.linspace(130, 160, num=15)
   azimuth = np.linspace(30, 40, num=20)

Our goal is to create an instance of :class:`~pyrt.observation.Angles` to hold on to
all the angular values DISORT wants. This class turns incidence and emission
angles into :math:`\mu_0` and :math:`\mu` and also holds on to azimuthal
angles. We could directly instantiate this class, but pyRT_DISORT comes with a
helper function (:func:`~pyrt.observation.sky_image`) that makes the inputs to and
returns an instance of Angles. Let's do this below and
look at the object's properties.

.. code-block:: python

   from pyrt.observation import sky_image

   angles = sky_image(incidence, emission, azimuth, beam_azimuth)

   mu = angles.mu
   mu0 = angles.mu0
   phi = angles.phi
   phi0 = angles.phi0

.. attention::
   The angles must be in degrees.

In this case, the shapes of both :code:`mu0` and :code:`phi0` are (1,), which
is to say they're vectors with a single element in them. :code:`mu` has shape
(1, 15) and :code:`phi` has shape (1, 20), meaning there are 15 and 20 angles,
respectively, that correspond to the single incident beam. We can then choose
appropriate values by choosing a pixel index, like the following:

.. code-block:: python

   UMU = mu[0, :]
   UMU0 = mu0[0]
   PHI = phi[0, :]
   PHI0 = phi0[0]

DISORT expects the input of :code:`UMU0` and :code:`PHI0` to be floats which we
obtained by choosing the pixel's index. It expects :code:`UMU` and :code:`PHI`
to both be 1D arrays which we got the same way.

.. note::
   For those of that have experience working with DISORT directly, I'll name
   the variables in this example with the same names that DISORT uses. For
   those unfamiliar with DISORT/FORTRAN, variables in all caps will be the ones
   that we ultimately plug into the DISORT call.

Spectral
--------
Let's assume that the rover's camera takes data at W wavelengths in each
pixel and that there's a constant spectral width to each bin. Suppose it took
data at 5 wavelengths, and each spectral pixel had a width of 100 nm. Let's go
ahead and define some wavelengths here so we have some values to work with.

.. code-block:: python

   pixel_wavelengths = np.array([1, 2, 3, 4, 5])
   n_wavelengths = len(pixel_wavelengths)
   width = 0.1

.. attention::
   The wavelengths must be in microns.

Our goal is to create an instance of :class:`~pyrt.observation.Spectral` to hold on
to all the spectral values DISORT wants. This class will hold on to the input
wavelengths and compute the wavenumbers at the edges of each spectral bin.
We could instantiate this class directly, but let's use a helper function that
comes with pyRT_DISORT (:func:`~pyrt.observation.constant_width`) do the work for us
and then look at the object's properties.

.. code-block:: python

   from pyrt.observation import constant_width

   spectral = constant_width(pixel_wavelengths, width)

   WVNMHI = spectral.high_wavenumber
   WVNMLO = spectral.low_wavenumber

These spectral quantities have shape (5,)---the same as the input wavelengths.
For now, I'll keep the spectral dimension but be aware that we'll cut off the
spectral dimension closer to when we do the simulation because DISORT requires
a separate call for each wavelength.

The only other thing you'd need from an observation is the signal your
instrument recorded. We won't need that value until much later on, so let's
wait until later to input those values.
