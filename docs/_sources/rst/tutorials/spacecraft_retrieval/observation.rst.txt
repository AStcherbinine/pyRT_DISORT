######################
The observation module
######################
Let's begin by considering some of the quantities found in a typical
observation---the angles and wavelengths at which some instrument collected
data. In the "spacecraft" case, I'll assume we have an orbiter than takes 2D
images such that the data have shape (M, N) and each pixel in the MxN grid
contain W wavelengths.

******
Angles
******
Each pixel will have its own unique combination of incidence, emission, and
phase angles that doesn't depend on wavelength. Suppose that we have an image
that has shape (15, 20). Let's create a set of angles defined in each of these
300 pixels to use in this example (for simplicity of the example, let's assume
that all three of these angles are the same).

.. code-block:: python

   import numpy as np

   dummy_angles = np.outer(np.linspace(5, 10, num=15), np.linspace(5, 8, num=20))

Our goal is to create an instance of :class:`~observation.Angles` to hold on to
all the angular values DISORT wants. This class turns incidence and emission
angles into :math:`\mu_0` and :math:`\mu` and also holds on to azimuthal
angles. We cannot directly instantiate this class because we have phase angles
and not azimuthal angles, but pyRT_DISORT comes with a helper function
(:func:`~observation.phase_to_angles`) that creates azimuthal angles and
returns an instance of :class:`~observation.Angles`. Let's do this below and
look at the object's properties.

.. code-block:: python

   from pyRT_DISORT.observation import phase_to_angles

   angles = phase_to_angles(dummy_angles, dummy_angles, dummy_angles)

   incidence = angles.incidence
   emission = angles.emission
   phase = angles.phase
   mu = angles.mu
   mu0 = angles.mu0
   phi = angles.phi
   phi0 = angles.phi0

.. attention::
   The angles must be in degrees.

In this case, the shapes of both :code:`mu0` and :code:`phi0` are (15, 20)---
the same shape as the input angles---whereas :code:`mu` and :code:`phi` both
have shapes (15, 20, 1). That's to say, each "observation" has only 1 set of
emission and azimuth angles. We can then choose appropriate values by choosing
a pixel index, like the following:

.. code-block:: python

   UMU = mu[0, 0, :]
   UMU0 = mu0[0, 0]
   PHI = phi[0, 0, :]
   PHI0 = phi0[0, 0]

DISORT expects the input of :code:`UMU0` and :code:`PHI0` to be floats which we
obtained by choosing the pixel's M and N indices. It expects :code:`UMU` and
:code:`PHI` to both be 1D arrays (here, both are length 1) which we got the
same way. This class offers the ability to compute all of the angular
quantities in an image at once, offering potentially significant computational
time savings. For the remainder of this example, I'll only stick to using a
single pixel.

.. note::
   For those of that have experience working with DISORT directly, I'll name
   the variables in this example with the same names that DISORT uses. For
   those unfamiliar with DISORT/FORTRAN, variables in ALL CAPS will be the ones
   that we ultimately plug into the DISORT call.

********
Spectral
********
Let's assume that the hyperspectral imager takes data at W wavelengths in each
pixel and that there's a constant spectral width to each bin. Suppose it took
data at 5 wavelengths, and each spectral pixel had a width of 100 nm. Let's go
ahead and define some wavelengths here so we have some values to work with.

.. code-block:: python

   pixel_wavelengths = np.array([1, 2, 3, 4, 5])
   n_wavelengths = len(pixel_wavelengths)
   width = 0.1

.. attention::
   The wavelengths must be in microns.

Our goal is to create an instance of :class:`~observation.Spectral` to hold on
to all the spectral values DISORT wants. This class will hold on to the input
wavelengths and compute the wavenumbers at the edges of each spectral bin.
We could instantiate this class directly, but let's use a helper function that
comes with pyRT_DISORT (:func:`~observation.constant_width`) do the work for us
and then look at the object's properties.

.. code-block:: python

   from pyRT_DISORT.observation import constant_width

   spectral = constant_width(pixel_wavelengths, width)

   short_wavelength = spectral.short_wavelength
   long_wavelength = spectral.long_wavelength
   WVNMHI = spectral.high_wavenumber
   WVNMHI = spectral.low_wavenumber

These spectral quantities have shape (5,)---the same as the input wavelengths.
For now, I'll keep the spectral dimension but be aware that we'll cut off the
spectral dimension closer to when we do the simulation because DISORT requires
a separate call for each wavelength.

The only other thing you'd need from an observation is the signal your
instrument recorded. We won't need that value until much later on, so let's
wait until later to input those values.
