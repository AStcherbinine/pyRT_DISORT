To-dos on current clean code:
- General
--- Latex docstrings would improve readability in a number of areas
--- Switch to whatever numpy used with Sphinx
--- Add an automatic linter
--- Can I get Github to automatically generate documentation when I push code?

- boundary_conditions.BoundaryConditions
--- I raise errors very strictly, like 1 fails where 1.0 succeeds. I should make
    things less strict.

- eos.ModelEquationOfState
--- Mike said to do this in log(z) space. Is that still relevant?
--- Fix some duplicate logic
--- I ask for a z grid to interpolate on to, but allow a P grid

- eos.eos_from_file
--- This function does way more than one thing, so clean it up
--- Decide if I want to input a string or something else. An array would be
    maximally flexible but a string is most convenient.

- modelsetup.Control
--- Notes shouldn't say what everything does... that should be in the @property
    docstring
--- Unit tests

- modelsetup.Output
--- Add info from DISORT documentation to these docstrings
--- Unit tests

- modelsetup.Size
--- Notes shouldn't say what everything does... that should be in the @property
    docstring
--- Unit tests

- modelsetup.Unsure
--- Get rid of this

- observation.Angles
--- Add DISORT documentation to these docstrings
--- I don't think all possible combination of angles is mathematically possible
--- Some functions do more than one thing
--- Is there a better way to make phi?

- observation.Wavelengths
--- Add DISORT documentation to these docstrings
--- Do I want to require monotonically increasing wavelengths?
--- Some functions do more than one thing

- utilities.array_checks.ArrayChecker
--- Unit tests + cleaner

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Updates:
--- surface.py
--- rayleigh.py
--- vertical_profiles.py
--- aerosol.py
--- phase_function.py
--- aerosol_column.py
--- model_atmosphere.py
--- Add integrated tests

Utilities:
--- create_fits.py
--- external_files.py
--- fit_phase_function.py
--- get_module_path.py
--- shared_array.py
--- sporadic...grid.py

- Documentation
--- I cannot have empty .py files for pdoc3 to work. But I don't want
    __init__.py to have stuff in it
--- Switch to Sphinx if possible

- Miscellaneous
--- Language: idk if an array can be positive---only contain positive values
--- I'm not sure if my levels of abstraction for class checkers are good
--- Move path.py to the utilities folder
--- Update README.md
--- It still feels messy to me to have the disort4.0.99 stuff where it is

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Old to-dos that I'm not ready to get rid of ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Fixes:
--- Combine most recent dust files into a 3D .fits file
--- Combine most recent ice files in to a 3D .fits file
--- Check I can make a 1 layer atmosphere
--- Remake the DISORT examples with the new classes

Additions:
--- Make ice PMOM
--- Add ozone
--- Add an efficient solver
--- Parallelize over wavelength / observations (pixels)
--- Correlated k
--- T-matrix

Tests:
--- What happens when phase functions are defined at different wavelengths? Like dust and ice at short wavs
--- Add checks throughout to ensure the same wavelengths, moments, etc. are used. We don't want one aerosol observed
    at different wavelenghts than another. Also ensure they CAN have different r_effective
--- Make sure if I have 100 particle sizes, things don't go haywire...
