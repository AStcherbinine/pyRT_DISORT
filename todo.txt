Refresh:
--- optical_depth checks + tests + guide
--- phase_function checks + tests + guide
--- model_atmosphere checks + tests + guide
--- controller checks + tests + guide
--- surface checks + tests + guide
--- radiation checks + tests + guide
--- output checks + tests + guide
--- disort_run checks + tests + guide

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Refresh part 2:
--- Remake the integration tests to conform with pytest
--- Remake the untested utilities + tests + guide
--- Consider a better organizational structure. ~15 modules seems like a ton

User's guide part 2:
--- Add info on the new utilities
--- Add an example of how to solve for dust OD + parallelize

Documentation:
--- try to make a dummy index.html so docs can all be on one folder
--- When I build documentation, I want to overwrite the old. Sometimes not all
    files are changed
--- Have "next" and "previous" only go through the example
--- If a class inherited properties from another class, they're not showing up
    in the documentation
--- Remove my computer's path from notes.md
--- Can I remove the .pytest_cache once I'm done with all tests?

Additions:
--- Add an automatic linter
--- Add ability to run all unit/integration tests with one command (see tox)
--- Move path.py to the utilities folder
--- It still feels messy to me to have the disort4.0.99 stuff where it is
--- Make ice PMOM
--- Add ozone
--- Correlated k

Possible additions:
--- Remake the DISORT examples with the new classes

Tests:
--- What happens when phase functions are defined at different wavelengths? Like dust and ice at short wavs
--- Add checks throughout to ensure the same wavelengths, moments, etc. are used. We don't want one aerosol observed
    at different wavelenghts than another. Also ensure they CAN have different r_effective
--- Rename the integrated tests as "test1" etc. since there's really no way
    I can say what they're testing in the name. But do provide a docstring
    at the top that states specifically what it tests for. Also, now that I can
    do many pixels at once, I can combine a number of the tests.

Miscellaneous
--- Josh says there are nicer things than fits, so consider using that format
    instead of astropy. scipy has netCDF built in
