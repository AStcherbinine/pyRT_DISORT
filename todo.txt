Design
--- UU outputs a bunch of junk 0s in addition to "good" values---fix that?
--- Specify layers independent of mars_atm.inp?

Assumptions
--- Every aerosol will have a dust.npy-type file
--- ice.npy / dust.npy have the columns specified in the correct order
--- mars_atm.npy has the columns specified in the correct order
--- Every aerosol will either be HG or use a 3D phase function file

Questions:
--- What are the 2 additional columns in ice?
--- What are pivot pressures/altitudes/temperatures?

Test:
--- Make sure if I have 100 particle sizes, things don't go haywire...

Fix:
--- In EmpiricalPhaseFunction, "legendre_moments" might be better than "phase_function" since they're not phase functions
--- Remove old phase functions + generally unnecessary aux files

Work on next:
--- Vertical profile (from GCM) injection. Then compare ice to disort_multi
--- Check that the model_atmosphere takes care of aerosols with different n_moments?
--- Add InterpPhaseFunction. Then update HHEPF to take either 'nn' or 'interpolated' or something like that
--- Add HG
--- Get ice PMOM (if it exists)
--- Cleanup all phase_function stuff: better naming conventions, public methods to get parameters?, assert things
    can be EPF or HG
--- Ensure Column can accommodate different profiles for different particle sizes
--- Add ozone
--- Fix strings to f strings
--- assert() might be better to raise ValueError('myMessage') or something
--- Move all the asserts in __init__ into a function... since they just check the inputs are good
--- Solver
--- Parallelize over wavelength
--- numba?
--- Add checks throughout to ensure the same wavelengths, moments, etc. are used. We don't want one aerosol observed
    at different wavelenghts than another. Also ensure they CAN have different r_effective
--- Unit tests
--- Postprocessing
--- Correlated k
--- T-matrix?
