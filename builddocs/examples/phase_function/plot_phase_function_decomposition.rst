
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/phase_function/plot_phase_function_decomposition.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_phase_function_plot_phase_function_decomposition.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_phase_function_plot_phase_function_decomposition.py:


Phase Function Decomposition
============================

Decompose a phase function into Legendre coefficients.

.. GENERATED FROM PYTHON SOURCE LINES 10-11

First import everything needed for this example.

.. GENERATED FROM PYTHON SOURCE LINES 11-15

.. code-block:: default

    import matplotlib.pyplot as plt
    import numpy as np
    import pyrt








.. GENERATED FROM PYTHON SOURCE LINES 16-20

Let's grab a phase function and the angles over which it's defined. The phase
function has shape (181, 24, 317), where it's defined over 181 scattering
angles, 24 particle sizes, and 317 wavelengths. For this example, let's just
pick the first one so we have an array to work with.

.. GENERATED FROM PYTHON SOURCE LINES 20-25

.. code-block:: default

    dust_dir = '/home/kyle/repos/pyRT_DISORT/anc/mars_dust/'
    phase_function = np.load(dust_dir + 'phase_function.npy')[:, 0, 0]
    scattering_angles = np.load(dust_dir + 'scattering_angles.npy')
    print(scattering_angles)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [  0.   1.   2.   3.   4.   5.   6.   7.   8.   9.  10.  11.  12.  13.
      14.  15.  16.  17.  18.  19.  20.  21.  22.  23.  24.  25.  26.  27.
      28.  29.  30.  31.  32.  33.  34.  35.  36.  37.  38.  39.  40.  41.
      42.  43.  44.  45.  46.  47.  48.  49.  50.  51.  52.  53.  54.  55.
      56.  57.  58.  59.  60.  61.  62.  63.  64.  65.  66.  67.  68.  69.
      70.  71.  72.  73.  74.  75.  76.  77.  78.  79.  80.  81.  82.  83.
      84.  85.  86.  87.  88.  89.  90.  91.  92.  93.  94.  95.  96.  97.
      98.  99. 100. 101. 102. 103. 104. 105. 106. 107. 108. 109. 110. 111.
     112. 113. 114. 115. 116. 117. 118. 119. 120. 121. 122. 123. 124. 125.
     126. 127. 128. 129. 130. 131. 132. 133. 134. 135. 136. 137. 138. 139.
     140. 141. 142. 143. 144. 145. 146. 147. 148. 149. 150. 151. 152. 153.
     154. 155. 156. 157. 158. 159. 160. 161. 162. 163. 164. 165. 166. 167.
     168. 169. 170. 171. 172. 173. 174. 175. 176. 177. 178. 179. 180.]




.. GENERATED FROM PYTHON SOURCE LINES 26-27

Let's resample the phase function to increase its resolution to 361 points.

.. GENERATED FROM PYTHON SOURCE LINES 27-30

.. code-block:: default

    phase_function, scattering_angles = \
            pyrt.resample(phase_function, scattering_angles, 361)








.. GENERATED FROM PYTHON SOURCE LINES 31-35

We can now decompose the phase function. This method automatically normalizes
the phase function so we don't need to explicitly do that. Let's decompose it
into 129 moments (128 moments in addition to the zeroth moment, which is
always 1).

.. GENERATED FROM PYTHON SOURCE LINES 35-38

.. code-block:: default

    lc = pyrt.decompose(phase_function, scattering_angles, 129)
    print(lc)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [ 1.00000000e+00  1.77783626e-01  5.09395621e-01  3.52003674e-02
      1.63120771e-03  6.00358352e-05  4.15104944e-06 -2.03278222e-06
     -6.24407927e-06 -2.06439479e-06  8.10554313e-06 -1.64261814e-06
     -8.24641547e-06 -3.72750596e-06  1.34140765e-07 -3.71275525e-06
     -2.63604165e-06  9.55363534e-06 -3.10990973e-06  9.36671422e-06
     -5.55325056e-06  4.02497986e-06  8.79663306e-06 -1.04293581e-05
     -4.34661768e-06 -1.59371166e-05  4.04454992e-06  9.33530239e-06
     -3.83336158e-06 -7.05539097e-06 -1.28622842e-05  1.31878915e-05
      6.01438533e-06 -1.81468401e-05  6.50566622e-06  2.01628414e-05
     -9.20137141e-06  9.13027850e-07  2.42888436e-06  2.62764037e-07
     -1.34933773e-06 -5.20038876e-06  1.12795720e-05 -6.40313690e-06
     -2.87674700e-06  1.17273059e-05 -2.42520270e-06  3.77865765e-06
      5.48374321e-06 -1.24177651e-05  1.01054947e-06  2.95698358e-05
      3.67276515e-06 -1.51494370e-05 -4.25532790e-06 -3.43289346e-06
      3.14118526e-07  9.68602417e-06 -7.77372141e-06 -2.75310772e-05
     -3.22774076e-05 -9.49435456e-06  2.01124147e-05 -2.71877190e-05
      3.48854656e-06  1.67258113e-05 -2.65097555e-06  2.22116061e-05
     -1.69312353e-05 -8.06165709e-06  3.60812907e-05 -1.59368604e-05
      5.72691640e-06  1.61729408e-05 -2.65463248e-05 -5.06636147e-06
      7.64533808e-06 -2.24364424e-05  1.20637131e-05  4.85550564e-05
     -1.85035331e-05 -4.01402007e-05 -1.07588557e-05  1.17761626e-05
      6.86205137e-06  1.32878797e-06 -4.75162720e-06 -8.04370474e-06
      2.60668152e-05 -3.95322202e-06  1.60948420e-05  1.87235201e-08
      3.53112249e-06 -1.13580056e-05  1.93805439e-05  1.71737630e-05
     -6.08727476e-06 -4.26020936e-06  9.36290573e-07 -1.36071223e-06
     -7.53196975e-06  2.19204157e-07  7.48867946e-06  4.44108095e-06
     -2.06149017e-05 -6.65725715e-06  2.83034953e-10  9.67988680e-06
      3.52755897e-06  9.87034297e-06 -2.80182212e-05 -5.58017407e-06
      2.71905947e-05 -1.80797481e-06 -1.61385611e-05 -1.01595327e-05
     -4.07606647e-06 -3.65570105e-06  7.59269048e-06 -5.06873485e-06
     -1.79371239e-05 -5.12678882e-06 -2.02863889e-05 -5.37502655e-05
     -1.24761541e-05  7.01676405e-05  9.79816847e-05  3.06401258e-05
     -2.48380546e-05]




.. GENERATED FROM PYTHON SOURCE LINES 39-41

At index 7 the coefficient is negative, and it appears the coefficients
oscillate around 0 after this. Let's set these to 0.

.. GENERATED FROM PYTHON SOURCE LINES 41-43

.. code-block:: default

    lc = pyrt.set_negative_coefficients_to_0(lc)








.. GENERATED FROM PYTHON SOURCE LINES 44-46

We can test how well the fit did by converting back into a phase function.
Let's do that and see how it performed.

.. GENERATED FROM PYTHON SOURCE LINES 46-82

.. code-block:: default

    reconstructed_pf = pyrt.reconstruct(lc, scattering_angles)

    plt.rc('mathtext', fontset='stix')
    plt.rc('font', **{'family': 'STIXGeneral'})
    plt.rc('font', size=8)
    plt.rc('axes', titlesize=12)
    plt.rc('axes', labelsize=12)
    plt.rc('xtick', labelsize=12)
    plt.rc('ytick', labelsize=12)
    plt.rc('legend', fontsize=12)
    plt.rc('figure', titlesize=12)
    plt.rc('pdf', fonttype=42)
    plt.rc('ps', fonttype=42)
    plt.rc('lines', linewidth=0.5)
    plt.rc('axes', linewidth=0.5)
    plt.rc('xtick.major', width=0.5)
    plt.rc('xtick.minor', width=0.5)
    plt.rc('ytick.major', width=0.5)
    plt.rc('ytick.minor', width=0.5)
    dpi = 150

    fig, ax = plt.subplots()
    ax.plot(scattering_angles, phase_function,
            color='k',
            label='Original phase function')
    ax.plot(scattering_angles, reconstructed_pf,
            color='r',
            label='Reconstructed phase function',
            linestyle='dotted')
    plt.legend()
    ax.set_xlim(0, 180)
    ax.set_xlabel('Scattering Angle [degrees]')
    ax.set_ylabel('Phase Function')
    ax.set_xticks(np.linspace(0, 180, num=180//30+1))
    ax.set_xticks(np.linspace(0, 180, num=180//10+1), minor=True)
    plt.show()



.. image-sg:: /examples/phase_function/images/sphx_glr_plot_phase_function_decomposition_001.png
   :alt: plot phase function decomposition
   :srcset: /examples/phase_function/images/sphx_glr_plot_phase_function_decomposition_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.396 seconds)


.. _sphx_glr_download_examples_phase_function_plot_phase_function_decomposition.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_phase_function_decomposition.py <plot_phase_function_decomposition.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_phase_function_decomposition.ipynb <plot_phase_function_decomposition.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
